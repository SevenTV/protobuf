syntax = "proto3";

package waterhose.v1;

option go_package = "waterhose/v1";

service WaterHoseService {
  rpc RegisterSlave(RegisterSlaveRequest)
    returns (stream RegisterSlaveResponse) {}

  rpc PublishSlaveChannelEvent(PublishSlaveChannelEventRequest)
    returns (PublishSlaveChannelEventResponse) {}

  rpc JoinChannel(JoinChannelRequest)
    returns (JoinChannelResponse) {}

  rpc SlaveJoinLimit(SlaveJoinLimitRequest)
    returns (SlaveJoinLimitResponse) {}
}


message Channel {
  string id = 1;
  string login = 2;
  int32 priority = 3;
  bool use_anonymous = 4;
  bool bot_banned = 5;
}


message RegisterSlaveRequest {
  string slave_name = 1;
}

message RegisterSlaveResponse {
  enum EventType {
    EVENT_TYPE_UNSPECIFIED = 0;
    EVENT_TYPE_LOGIN = 1;
    EVENT_TYPE_JOIN_CHANNEL = 2;
    EVENT_TYPE_PART_CHANNEL = 3;
  }

  message LoginPayload {
    Channel channel = 1;
    string oauth = 2;
  }
  message JoinChannelPayload {
    repeated Channel channels = 1;
  }
  message PartChannelPayload {
    repeated Channel channels = 1;
  }

  EventType type = 1;
  oneof payload {
    LoginPayload login_payload = 2;
    JoinChannelPayload join_channel_payload = 3;
    PartChannelPayload part_channel_payload = 4; 
  }
}

message PublishSlaveChannelEventRequest {
  enum EventType {
    EVENT_TYPE_UNSPECIFIED = 0;
    EVENT_TYPE_UNKNOWN_CHANNEL = 1;
    EVENT_TYPE_SUSPENDED_CHANNEL = 2;
    EVENT_TYPE_BOT_BANNED = 3;
    EVENT_TYPE_JOINED = 4;
  }

  EventType type = 1;
  Channel channel = 2;
}

message PublishSlaveChannelEventResponse {
  bool success = 1;
}

message JoinChannelRequest {
  repeated Channel channels = 1;
}

message JoinChannelResponse {
  bool success = 1;
}

message SlaveJoinLimitRequest {
  Channel channel = 1;
}

message SlaveJoinLimitResponse {
  bool allowed = 1;
}
